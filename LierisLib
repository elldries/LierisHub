--[[
    ═══════════════════════════════════════════════════════════════════════════════════
                                                                                       
                             LIERIS UI LIBRARY v4.0                                   
                        Ultimate Premium Interface Suite                             
                           Developed by elldries                                      
                                                                                       
       Discord: https://discord.gg/TmyBPH539k                                        
       The most beautiful UI library for Roblox                                      
                                                                                       
    ═══════════════════════════════════════════════════════════════════════════════════
    
    ULTIMATE FEATURES:
    • Ultra-dynamic glassmorphism design
    • Professional animations and transitions
    • Custom logo and branding
    • Discord integration with browser opening
    • Adaptive mobile/desktop controls
    • Premium color scheme (Blue/White/Black)
    • Advanced particle effects
    • Professional typography
]]

-- Enhanced Service Manager
local Services = setmetatable({}, {
    __index = function(self, serviceName)
        local service = game:GetService(serviceName)
        if cloneref then service = cloneref(service) end
        rawset(self, serviceName, service)
        return service
    end
})

-- Main Lieris Library
local Lieris = {
    Version = "4.0.0",
    Build = "Ultimate",
    Developer = "elldries",
    Discord = "https://discord.gg/TmyBPH539k",
    
    Windows = {},
    Flags = {},
    CurrentWindow = nil,
    MobileToggleButton = nil,
    
    -- Улучшенная Ultimate Theme (Blue/White/Black)
    Theme = {
        Primary = Color3.fromRGB(59, 130, 246),      -- Beautiful Blue
        Secondary = Color3.fromRGB(99, 102, 241),     -- Purple Blue
        Accent = Color3.fromRGB(139, 92, 246),        -- Light Purple
        
        Background = Color3.fromRGB(18, 18, 27),      -- Dark но не совсем черный
        Surface = Color3.fromRGB(30, 30, 45),         -- Темно-серый поверхность
        Card = Color3.fromRGB(45, 45, 60),            -- Темно-серая карточка
        
        Text = Color3.fromRGB(248, 250, 252),         -- Pure White Text
        TextSecondary = Color3.fromRGB(203, 213, 225), -- Light Gray
        TextMuted = Color3.fromRGB(148, 163, 184),    -- Muted Gray
        
        Success = Color3.fromRGB(34, 197, 94),
        Warning = Color3.fromRGB(251, 191, 36),
        Error = Color3.fromRGB(239, 68, 68),
        Info = Color3.fromRGB(59, 130, 246),
        
        Shadow = Color3.fromRGB(0, 0, 0),
        Border = Color3.fromRGB(100, 116, 139),
        Glow = Color3.fromRGB(59, 130, 246),
        
        -- Настройки прозрачности (0 = непрозрачный) для всех элементов
        BackgroundTransparency = 0,
        SurfaceTransparency = 0,
        CardTransparency = 0,
        ElementTransparency = 0,
        BorderTransparency = 0,
        NotificationTransparency = 0,
        OverlayTransparency = 0,
        
        -- Задержка появления GUI (в секундах)
        InterfaceDelay = 2.0
    },
    
    Device = {
        Type = "Desktop",
        Scale = 1,
        IsMobile = false
    }
}

-- Device Detection
local function detectDevice()
    local viewport = Services.Workspace.CurrentCamera.ViewportSize
    local isTouchEnabled = Services.UserInputService.TouchEnabled
    
    Lieris.Device.ScreenSize = viewport
    Lieris.Device.IsMobile = isTouchEnabled
    
    if isTouchEnabled then
        if viewport.X <= 768 then
            Lieris.Device.Type = "Mobile"
            Lieris.Device.Scale = 1.4
        else
            Lieris.Device.Type = "Tablet"
            Lieris.Device.Scale = 1.2
        end
    else
        Lieris.Device.Type = "Desktop"
        Lieris.Device.Scale = 1.0
    end
    
    print("Device Type:", Lieris.Device.Type)
end

-- Scaling Functions
local function scale(value)
    return math.floor(value * Lieris.Device.Scale + 0.5)
end

local function scaleUDim2(udim2)
    return UDim2.new(
        udim2.X.Scale,
        scale(udim2.X.Offset),
        udim2.Y.Scale,
        scale(udim2.Y.Offset)
    )
end

-- Advanced Animation System
local function tween(instance, properties, duration, style, direction, callback)
    duration = duration or 0.4
    
    -- Convert string styles to Enum values safely
    local easingStyle = Enum.EasingStyle.Quart
    local easingDirection = Enum.EasingDirection.Out
    
    if style then
        if type(style) == "string" then
            if style == "Linear" then easingStyle = Enum.EasingStyle.Linear
            elseif style == "Quad" then easingStyle = Enum.EasingStyle.Quad
            elseif style == "Cubic" then easingStyle = Enum.EasingStyle.Cubic
            elseif style == "Quart" then easingStyle = Enum.EasingStyle.Quart
            elseif style == "Quint" then easingStyle = Enum.EasingStyle.Quint
            elseif style == "Sine" then easingStyle = Enum.EasingStyle.Sine
            elseif style == "Expo" then easingStyle = Enum.EasingStyle.Expo
            elseif style == "Circ" then easingStyle = Enum.EasingStyle.Circ
            elseif style == "Back" then easingStyle = Enum.EasingStyle.Back
            elseif style == "Elastic" then easingStyle = Enum.EasingStyle.Elastic
            elseif style == "Bounce" then easingStyle = Enum.EasingStyle.Bounce
            end
        else
            easingStyle = style
        end
    end
    
    if direction then
        if type(direction) == "string" then
            if direction == "In" then easingDirection = Enum.EasingDirection.In
            elseif direction == "Out" then easingDirection = Enum.EasingDirection.Out
            elseif direction == "InOut" then easingDirection = Enum.EasingDirection.InOut
            end
        else
            easingDirection = direction
        end
    end
    
    local tweenInfo = TweenInfo.new(duration, easingStyle, easingDirection)
    local tweenObj = Services.TweenService:Create(instance, tweenInfo, properties)
    
    if callback then
        tweenObj.Completed:Connect(callback)
    end
    
    tweenObj:Play()
    return tweenObj
end

-- Utility Functions
local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, scale(radius or 12))
    corner.Parent = parent
    return corner
end

local function createStroke(parent, color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Lieris.Theme.Border
    stroke.Thickness = scale(thickness or 1)
    stroke.Transparency = transparency or Lieris.Theme.BorderTransparency or 0
    stroke.Parent = parent
    return stroke
end

local function createGradient(parent, colorSequence, transparency, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Color = colorSequence
    gradient.Rotation = rotation or 0
    if transparency then
        gradient.Transparency = transparency
    end
    gradient.Parent = parent
    return gradient
end

-- Discord Integration
local function openDiscord()
    local discordLink = "https://discord.gg/TmyBPH539k"
    
    -- Try different methods to open browser
    if setclipboard then
        setclipboard(discordLink)
        Lieris:CreateNotification({
            Title = "Discord Link Copied!",
            Content = "Discord invite copied to clipboard. Paste in browser to join!",
            Duration = 5,
            Type = "Success"
        })
    else
        Lieris:CreateNotification({
            Title = "Discord Server",
            Content = "Join our Discord: discord.gg/TmyBPH539k",
            Duration = 7,
            Type = "Info"
        })
    end
    
    -- Additional methods for opening browser (if available)
    if syn and syn.request then
        syn.request({
            Url = discordLink,
            Method = "GET"
        })
    end
    
    print("Discord link:", discordLink)
end

-- Particle Effects System
local function createParticles(parent, count, color, speed)
    count = count or 5
    color = color or Lieris.Theme.Primary
    speed = speed or 2
    
    for i = 1, count do
        local particle = Instance.new("Frame")
        particle.Name = "Particle"
        particle.Size = UDim2.new(0, scale(3), 0, scale(3))
        particle.Position = UDim2.new(
            math.random(0, 100) / 100,
            0,
            math.random(0, 100) / 100,
            0
        )
        particle.BackgroundColor3 = color
        particle.BackgroundTransparency = 0.3
        particle.BorderSizePixel = 0
        particle.ZIndex = 1000
        particle.Parent = parent
        
        createCorner(particle, 999)
        
        -- Animate particle
        local targetPos = UDim2.new(
            particle.Position.X.Scale + (math.random(-50, 50) / 100),
            0,
            particle.Position.Y.Scale + (math.random(-50, 50) / 100),
            0
        )
        
        tween(particle, {
            Position = targetPos,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 0, 0, 0)
        }, math.random(1, 3) / speed, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, function()
            particle:Destroy()
        end)
    end
end

-- Ultimate Notification System
function Lieris:CreateNotification(config)
    config = config or {}
    
    if not self.NotificationContainer then
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "LierisNotifications"
        screenGui.ResetOnSpawn = false
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        screenGui.Parent = Services.CoreGui
        
        local container = Instance.new("Frame")
        container.Name = "Container"
        container.Size = UDim2.new(0, scale(380), 1, -scale(20))
        container.Position = UDim2.new(1, -scale(390), 0, scale(10))
        container.BackgroundTransparency = 1
        container.Parent = screenGui
        
        local listLayout = Instance.new("UIListLayout")
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0, scale(10))
        listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        listLayout.Parent = container
        
        self.NotificationContainer = container
    end
    
    -- Color based on type
    local colors = {
        Success = self.Theme.Success,
        Warning = self.Theme.Warning,
        Error = self.Theme.Error,
        Info = self.Theme.Info
    }
    local notifColor = colors[config.Type] or self.Theme.Primary
    
    -- Create notification
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(1, 0, 0, scale(90))
    notification.Position = UDim2.new(1, 0, 0, 0)
    notification.BackgroundColor3 = self.Theme.Surface
    notification.BackgroundTransparency = self.Theme.NotificationTransparency or 0
    notification.BorderSizePixel = 0
    notification.Parent = self.NotificationContainer
    
    createCorner(notification, 15)
    createStroke(notification, notifColor, 2, 0.4)
    
    -- Notification styling without blur
    -- blur removed for better performance
    
    -- Gradient overlay
    createGradient(notification, ColorSequence.new{
        ColorSequenceKeypoint.new(0, self.Theme.Primary),
        ColorSequenceKeypoint.new(1, self.Theme.Secondary)
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.95),
        NumberSequenceKeypoint.new(1, 0.98)
    }, 45)
    
    -- Status indicator
    local statusBar = Instance.new("Frame")
    statusBar.Name = "StatusBar"
    statusBar.Size = UDim2.new(0, scale(4), 1, 0)
    statusBar.BackgroundColor3 = notifColor
    statusBar.BorderSizePixel = 0
    statusBar.Parent = notification
    
    local statusCorner = Instance.new("UICorner")
    statusCorner.CornerRadius = UDim.new(0, scale(2))
    statusCorner.Parent = statusBar
    
    -- Icon
    local iconFrame = Instance.new("Frame")
    iconFrame.Name = "IconFrame"
    iconFrame.Size = UDim2.new(0, scale(40), 0, scale(40))
    iconFrame.Position = UDim2.new(0, scale(15), 0, scale(25))
    iconFrame.BackgroundColor3 = notifColor
    iconFrame.BackgroundTransparency = self.Theme.ElementTransparency or 0
    iconFrame.BorderSizePixel = 0
    iconFrame.Parent = notification
    
    createCorner(iconFrame, 10)
    
    local icon = Instance.new("TextLabel")
    icon.Name = "Icon"
    icon.Size = UDim2.new(1, 0, 1, 0)
    icon.BackgroundTransparency = 1
    icon.Font = Enum.Font.GothamBold
    icon.TextColor3 = notifColor
    icon.TextSize = scale(20)
    icon.TextXAlignment = Enum.TextXAlignment.Center
    icon.TextYAlignment = Enum.TextYAlignment.Center
    icon.Parent = iconFrame
    
    -- Icon based on type
    local icons = {
        Success = "✓",
        Warning = "⚠",
        Error = "✕",
        Info = "ℹ"
    }
    icon.Text = icons[config.Type] or "•"
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Position = UDim2.new(0, scale(65), 0, scale(15))
    title.Size = UDim2.new(1, -scale(100), 0, scale(25))
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.Text = config.Title or "Notification"
    title.TextColor3 = self.Theme.Text
    title.TextSize = scale(16)
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextYAlignment = Enum.TextYAlignment.Center
    title.Parent = notification
    
    -- Content
    local content = Instance.new("TextLabel")
    content.Name = "Content"
    content.Position = UDim2.new(0, scale(65), 0, scale(40))
    content.Size = UDim2.new(1, -scale(100), 0, scale(35))
    content.BackgroundTransparency = 1
    content.Font = Enum.Font.Gotham
    content.Text = config.Content or "Notification content"
    content.TextColor3 = self.Theme.TextSecondary
    content.TextSize = scale(13)
    content.TextXAlignment = Enum.TextXAlignment.Left
    content.TextYAlignment = Enum.TextYAlignment.Top
    content.TextWrapped = true
    content.Parent = notification
    
    -- Close button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseButton"
    closeBtn.Size = UDim2.new(0, scale(25), 0, scale(25))
    closeBtn.Position = UDim2.new(1, -scale(35), 0, scale(10))
    closeBtn.BackgroundColor3 = self.Theme.Error
    closeBtn.BackgroundTransparency = 0.1
    closeBtn.BorderSizePixel = 0
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Text = "×"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = scale(14)
    closeBtn.Parent = notification
    
    createCorner(closeBtn, 8)
    
    closeBtn.MouseButton1Click:Connect(function()
        tween(notification, {
            Position = UDim2.new(1, 0, 0, 0),
            BackgroundTransparency = 1
        }, 0.3, "Quad", "In", function()
            notification:Destroy()
        end)
    end)
    
    -- Animate in
    tween(notification, {Position = UDim2.new(0, 0, 0, 0)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    -- Auto dismiss
    local duration = config.Duration or 5
    task.spawn(function()
        task.wait(duration)
        if notification.Parent then
            tween(notification, {
                Position = UDim2.new(1, 0, 0, 0),
                BackgroundTransparency = 1
            }, 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In, function()
                notification:Destroy()
            end)
        end
    end)
    
    return notification
end

-- Mobile Toggle Button
local function createMobileToggle()
    if not Lieris.Device.IsMobile then return end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "LierisMobileToggle"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = Services.CoreGui
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    -- Делаем кнопку шире для ON/OFF текста
    toggleButton.Size = UDim2.new(0, scale(100), 0, scale(60))
    toggleButton.Position = UDim2.new(1, -scale(110), 0, scale(20))
    toggleButton.BackgroundColor3 = Lieris.Theme.Primary
    toggleButton.BackgroundTransparency = Lieris.Theme.BackgroundTransparency or 0
    toggleButton.BorderSizePixel = 0
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Text = "ON/OFF"  -- Меняем текст с "L" на "ON/OFF"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextSize = scale(18)  -- Делаем текст меньше, чтобы он поместился
    toggleButton.ZIndex = 1000
    toggleButton.Parent = screenGui
    
    createCorner(toggleButton, 15)
    createStroke(toggleButton, Lieris.Theme.Glow, 3, 0.3)
    
    -- Pulsing glow effect
    local glowFrame = Instance.new("Frame")
    glowFrame.Name = "Glow"
    glowFrame.Size = UDim2.new(1, scale(10), 1, scale(10))
    glowFrame.Position = UDim2.new(0, -scale(5), 0, -scale(5))
    glowFrame.BackgroundColor3 = Lieris.Theme.Primary
    glowFrame.BackgroundTransparency = 0.8
    glowFrame.BorderSizePixel = 0
    glowFrame.ZIndex = toggleButton.ZIndex - 1
    glowFrame.Parent = toggleButton
    
    createCorner(glowFrame, 20)
    
    -- Animate glow
    task.spawn(function()
        while glowFrame.Parent do
            tween(glowFrame, {BackgroundTransparency = 0.9}, 1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
            task.wait(1.5)
            if glowFrame.Parent then
                tween(glowFrame, {BackgroundTransparency = 0.6}, 1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
                task.wait(1.5)
            end
        end
    end)
    
    -- Click handler
    toggleButton.MouseButton1Click:Connect(function()
        if Lieris.CurrentWindow then
            Lieris.CurrentWindow:Toggle()
            createParticles(toggleButton, 8, Lieris.Theme.Primary, 2)
        end
    end)
    
    Lieris.MobileToggleButton = toggleButton
    return toggleButton
end

-- Ultimate Loading Screen with Logo
local function createUltimateLoadingScreen()
    local loadingGui = Instance.new("ScreenGui")
    loadingGui.Name = "LierisUltimateLoading"
    loadingGui.ResetOnSpawn = false
    loadingGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    loadingGui.Parent = Services.CoreGui
    
    -- Animated background
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(1, 0, 1, 0)
    background.BackgroundColor3 = Lieris.Theme.Background
    background.BorderSizePixel = 0
    background.Parent = loadingGui
    
    -- Animated gradient background
    createGradient(background, ColorSequence.new{
        ColorSequenceKeypoint.new(0, Lieris.Theme.Background),
        ColorSequenceKeypoint.new(0.5, Lieris.Theme.Primary),
        ColorSequenceKeypoint.new(1, Lieris.Theme.Background)
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.1),
        NumberSequenceKeypoint.new(0.5, 0.3),
        NumberSequenceKeypoint.new(1, 0.1)
    }, 45)
    
    -- Main container
    local container = Instance.new("Frame")
    container.Name = "Container"
    container.Size = UDim2.new(0, scale(500), 0, scale(300))
    container.Position = UDim2.new(0.5, 0, 0.5, 0)
    container.AnchorPoint = Vector2.new(0.5, 0.5)
    container.BackgroundColor3 = Lieris.Theme.Surface
    container.BackgroundTransparency = 0
    container.BorderSizePixel = 0
    container.Parent = background
    
    createCorner(container, 25)
    createStroke(container, Lieris.Theme.Primary, 3, 0.2)
    
    -- Glassmorphism effect without background blur
    -- blur removed to prevent background interference
    
    -- Logo frame
    local logoFrame = Instance.new("Frame")
    logoFrame.Name = "LogoFrame"
    logoFrame.Size = UDim2.new(0, scale(100), 0, scale(100))
    logoFrame.Position = UDim2.new(0.5, 0, 0, scale(40))
    logoFrame.AnchorPoint = Vector2.new(0.5, 0)
    logoFrame.BackgroundColor3 = Lieris.Theme.Primary
    logoFrame.BackgroundTransparency = 0
    logoFrame.BorderSizePixel = 0
    logoFrame.Parent = container
    
    createCorner(logoFrame, 25)
    createStroke(logoFrame, Lieris.Theme.Glow, 4, 0.1)
    
    -- Logo text (stylized L)
    local logo = Instance.new("TextLabel")
    logo.Name = "Logo"
    logo.Size = UDim2.new(1, 0, 1, 0)
    logo.BackgroundTransparency = 1
    logo.Font = Enum.Font.GothamBold
    logo.Text = "L"
    logo.TextColor3 = Color3.fromRGB(255, 255, 255)
    logo.TextSize = scale(60)
    logo.TextXAlignment = Enum.TextXAlignment.Center
    logo.TextYAlignment = Enum.TextYAlignment.Center
    logo.TextTransparency = 1
    logo.Parent = logoFrame
    
    -- Main title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, scale(60))
    title.Position = UDim2.new(0, 0, 0, scale(160))
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.Text = "LIERIS"
    title.TextColor3 = Lieris.Theme.Text
    title.TextSize = scale(48)
    title.TextXAlignment = Enum.TextXAlignment.Center
    title.TextYAlignment = Enum.TextYAlignment.Center
    title.TextTransparency = 1
    title.Parent = container
    
    -- Subtitle
    local subtitle = Instance.new("TextLabel")
    subtitle.Name = "Subtitle"
    subtitle.Size = UDim2.new(1, 0, 0, scale(30))
    subtitle.Position = UDim2.new(0, 0, 0, scale(220))
    subtitle.BackgroundTransparency = 1
    subtitle.Font = Enum.Font.Gotham
    subtitle.Text = "Ultimate UI Library v4.0 • by elldries"
    subtitle.TextColor3 = Lieris.Theme.TextSecondary
    subtitle.TextSize = scale(16)
    subtitle.TextXAlignment = Enum.TextXAlignment.Center
    subtitle.TextYAlignment = Enum.TextYAlignment.Center
    subtitle.TextTransparency = 1
    subtitle.Parent = container
    
    -- Loading indicator
    local loadingDots = Instance.new("TextLabel")
    loadingDots.Name = "LoadingDots"
    loadingDots.Size = UDim2.new(1, 0, 0, scale(25))
    loadingDots.Position = UDim2.new(0, 0, 0, scale(260))
    loadingDots.BackgroundTransparency = 1
    loadingDots.Font = Enum.Font.Gotham
    loadingDots.Text = "Loading"
    loadingDots.TextColor3 = Lieris.Theme.Primary
    loadingDots.TextSize = scale(14)
    loadingDots.TextXAlignment = Enum.TextXAlignment.Center
    loadingDots.TextYAlignment = Enum.TextYAlignment.Center
    loadingDots.TextTransparency = 1
    loadingDots.Parent = container
    
    -- Animation sequence
    task.spawn(function()
        -- Animate container entrance
        container.Size = UDim2.new(0, 0, 0, 0)
        tween(container, {Size = UDim2.new(0, scale(500), 0, scale(300))}, 0.8, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        task.wait(0.3)
        
        -- Animate logo
        logoFrame.Size = UDim2.new(0, 0, 0, 0)
        tween(logoFrame, {Size = UDim2.new(0, scale(100), 0, scale(100))}, 0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        tween(logo, {TextTransparency = 0}, 0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        -- Spinning logo animation
        -- Logo rotation animation disabled
        -- Logo will remain static without rotation
        
        task.wait(0.4)
        
        -- Animate title with wave effect
        tween(title, {TextTransparency = 0}, 1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        task.spawn(function()
            while title.Parent do
                tween(title, {TextSize = scale(52)}, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
                task.wait(2)
                if title.Parent then
                    tween(title, {TextSize = scale(48)}, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
                    task.wait(2)
                end
            end
        end)
        
        task.wait(0.3)
        
        -- Animate subtitle
        tween(subtitle, {TextTransparency = 0}, 0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        task.wait(0.3)
        
        -- Animate loading dots
        tween(loadingDots, {TextTransparency = 0}, 0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        -- Animated loading text
        task.spawn(function()
            local dots = 0
            while loadingDots.Parent do
                dots = (dots % 3) + 1
                loadingDots.Text = "Loading" .. string.rep(".", dots)
                task.wait(0.6)
            end
        end)
        
        -- Particle effects
        task.spawn(function()
            while container.Parent do
                createParticles(container, 3, Lieris.Theme.Primary, 3)
                task.wait(1)
            end
        end)
        
        -- Wait and exit
        task.wait(4)
        
        -- Exit animation
        tween(container, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.2, 0),
            Rotation = -10
        }, 0.7, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        tween(background, {BackgroundTransparency = 1}, 0.7, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
        
        task.wait(0.8)
        loadingGui:Destroy()
    end)
    
    return loadingGui
end

-- Ultimate Window Creation
function Lieris:CreateWindow(config)
    config = config or {}
    detectDevice()
    
    if Lieris.Device.IsMobile then
        createMobileToggle()
    end
    
    local window = {
        Tabs = {},
        Elements = {},
        Visible = true,
        Config = config
    }
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = config.Name or "LierisUltimate"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = Services.CoreGui
    
    -- Window size based on device
    local windowSize
    if Lieris.Device.Type == "Mobile" then
        windowSize = UDim2.new(0.95, 0, 0.85, 0)
    elseif Lieris.Device.Type == "Tablet" then
        windowSize = UDim2.new(0.8, 0, 0.75, 0)
    else
        windowSize = scaleUDim2(UDim2.new(0, 900, 0, 650))
    end
    
    -- Main container with ultimate design
    local main = Instance.new("Frame")
    main.Name = "Main"
    main.Size = windowSize
    main.Position = UDim2.new(0.5, 0, 0.5, 0)
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.BackgroundColor3 = Lieris.Theme.Background
    main.BackgroundTransparency = 0
    main.BorderSizePixel = 0
    main.Parent = screenGui
    
    createCorner(main, 20)
    createStroke(main, Lieris.Theme.Primary, 3, 0.3)
    
    -- Remove blur effect to prevent background blurring
    -- blur effect removed for better visibility
    
    -- СИНИЙ градиент как вы просили! 💙
    createGradient(main, ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(59, 130, 246)),     -- Яркий синий
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(99, 102, 241)),   -- Глубокий синий
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(59, 130, 246)),   -- Средний синий
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(99, 102, 241)),   -- Темный синий
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(59, 130, 246)),   -- Светлый синий
        ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 45))        -- Темная база
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.05),
        NumberSequenceKeypoint.new(0.3, 0.1),
        NumberSequenceKeypoint.new(0.7, 0.15),
        NumberSequenceKeypoint.new(1, 0.2)
    }, 135)
    
    -- СЛОЙ СИЯНИЯ ✨
    local glowOverlay = Instance.new("Frame")
    glowOverlay.Name = "GlowOverlay"
    glowOverlay.Size = UDim2.new(1, 0, 1, 0)
    glowOverlay.Position = UDim2.new(0, 0, 0, 0)
    glowOverlay.BackgroundTransparency = 0.3  -- Делаем сияние более видимым!
    glowOverlay.BorderSizePixel = 0
    glowOverlay.ZIndex = main.ZIndex + 1
    glowOverlay.Parent = main
    
    createCorner(glowOverlay, 20)
    createGradient(glowOverlay, ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),    -- Белое сияние
        ColorSequenceKeypoint.new(0.3, Color3.fromRGB(59, 130, 246)),   -- Синее сияние
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(139, 92, 246)),   -- Фиолетовое сияние
        ColorSequenceKeypoint.new(1, Color3.fromRGB(168, 85, 247))      -- Яркое фиолетовое сияние
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.9),
        NumberSequenceKeypoint.new(0.5, 0.95),
        NumberSequenceKeypoint.new(1, 0.98)
    }, 45)
    
    -- Ultimate title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, scale(70))
    titleBar.BackgroundColor3 = Lieris.Theme.Surface
    titleBar.BackgroundTransparency = 0
    titleBar.BorderSizePixel = 0
    titleBar.Parent = main
    
    createCorner(titleBar, 20)
    createGradient(titleBar, ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(59, 130, 246)),     -- Яркий синий
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(99, 102, 241)),   -- Фиолетово-синий  
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB(139, 92, 246)),   -- Светло-фиолетовый
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(168, 85, 247)),   -- Яркий фиолетовый
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(236, 72, 153)),   -- Розово-фиолетовый
        ColorSequenceKeypoint.new(1, Color3.fromRGB(59, 130, 246))      -- Возврат к синему
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.05),
        NumberSequenceKeypoint.new(0.3, 0.08),
        NumberSequenceKeypoint.new(0.7, 0.12),
        NumberSequenceKeypoint.new(1, 0.15)
    }, 90)
    
    -- Logo in title bar
    local logoFrame = Instance.new("Frame")
    logoFrame.Name = "LogoFrame"
    logoFrame.Size = UDim2.new(0, scale(50), 0, scale(50))
    logoFrame.Position = UDim2.new(0, scale(15), 0, scale(10))
    logoFrame.BackgroundColor3 = Lieris.Theme.Primary
    logoFrame.BackgroundTransparency = 0
    logoFrame.BorderSizePixel = 0
    logoFrame.Parent = titleBar
    
    createCorner(logoFrame, 15)
    
    -- КРАСИВЫЙ ЛОГОТИП ВМЕСТО ПРОСТОЙ БУКВЫ! ⭐
    local logoText = Instance.new("TextLabel")
    logoText.Name = "LogoText"
    logoText.Size = UDim2.new(1, 0, 1, 0)
    logoText.BackgroundTransparency = 1
    logoText.Font = Enum.Font.GothamBold
    -- Заменяем на ImageLabel для использования ID логотипа
    logoText:Destroy()
    
    local logoImage = Instance.new("ImageLabel")
    logoImage.Name = "LogoImage"
    logoImage.Size = UDim2.new(1, 0, 1, 0)
    logoImage.BackgroundTransparency = 1
    logoImage.Image = "rbxassetid://83018356787548"  -- Ваш логотип!
    logoImage.ScaleType = Enum.ScaleType.Fit
    logoImage.Parent = logoFrame
    
    -- Добавляем градиент к логотипу
    createGradient(logoFrame, ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(59, 130, 246)),     -- Синий
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(139, 92, 246)),   -- Фиолетовый
        ColorSequenceKeypoint.new(1, Color3.fromRGB(236, 72, 153))      -- Розовый
    }, NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.1),
        NumberSequenceKeypoint.new(1, 0.3)
    }, 45)
    
    -- Spinning logo animation
    -- Logo rotation animation disabled for cleaner look
    -- Static logo without spinning animation
    
    -- Title text
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Position = UDim2.new(0, scale(80), 0, scale(10))
    title.Size = UDim2.new(1, -scale(200), 0, scale(30))
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.Text = config.Name or "Lieris Ultimate"
    title.TextColor3 = Lieris.Theme.Text
    title.TextSize = scale(20)
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextYAlignment = Enum.TextYAlignment.Center
    title.Parent = titleBar
    
    -- Subtitle
    local subtitle = Instance.new("TextLabel")
    subtitle.Name = "Subtitle"
    subtitle.Position = UDim2.new(0, scale(80), 0, scale(40))
    subtitle.Size = UDim2.new(1, -scale(200), 0, scale(20))
    subtitle.BackgroundTransparency = 1
    subtitle.Font = Enum.Font.Gotham
    subtitle.Text = "Ultimate UI Library v4.0 • by elldries"
    subtitle.TextColor3 = Lieris.Theme.TextSecondary
    subtitle.TextSize = scale(12)
    subtitle.TextXAlignment = Enum.TextXAlignment.Left
    subtitle.TextYAlignment = Enum.TextYAlignment.Center
    subtitle.Parent = titleBar
    
    -- Control buttons
    local controlsFrame = Instance.new("Frame")
    controlsFrame.Name = "Controls"
    controlsFrame.Size = UDim2.new(0, scale(120), 0, scale(40))
    controlsFrame.Position = UDim2.new(1, -scale(130), 0, scale(15))
    controlsFrame.BackgroundTransparency = 1
    controlsFrame.Parent = titleBar
    
    -- Discord button
    local discordBtn = Instance.new("TextButton")
    discordBtn.Name = "DiscordButton"
    discordBtn.Size = UDim2.new(0, scale(35), 0, scale(35))
    discordBtn.Position = UDim2.new(0, 0, 0, 0)
    discordBtn.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
    discordBtn.BackgroundTransparency = 0
    discordBtn.BorderSizePixel = 0
    discordBtn.Font = Enum.Font.GothamBold
    discordBtn.Text = ""  -- Убираем текст для иконки
    
    -- Добавляем ImageLabel для Discord иконки
    local discordIcon = Instance.new("ImageLabel")
    discordIcon.Name = "DiscordIcon"
    discordIcon.Size = UDim2.new(0.8, 0, 0.8, 0)
    discordIcon.Position = UDim2.new(0.1, 0, 0.1, 0)
    discordIcon.BackgroundTransparency = 1
    discordIcon.Image = "rbxassetid://10367063084"  -- Ваша Discord иконка!
    discordIcon.ScaleType = Enum.ScaleType.Fit
    discordIcon.Parent = discordBtn
    discordBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    discordBtn.TextSize = scale(16)
    discordBtn.Parent = controlsFrame
    
    createCorner(discordBtn, 10)
    
    discordBtn.MouseButton1Click:Connect(function()
        openDiscord()
        createParticles(discordBtn, 6, Color3.fromRGB(88, 101, 242), 2)
    end)
    
    -- Minimize button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeButton"
    minimizeBtn.Size = UDim2.new(0, scale(35), 0, scale(35))
    minimizeBtn.Position = UDim2.new(0, scale(42), 0, 0)
    minimizeBtn.BackgroundColor3 = Lieris.Theme.Warning
    minimizeBtn.BackgroundTransparency = 0
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.Text = "🔽"  -- Иконка стрелки вниз для сворачивания
    minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeBtn.TextSize = scale(16)
    minimizeBtn.Parent = controlsFrame
    
    createCorner(minimizeBtn, 10)
    
    minimizeBtn.MouseButton1Click:Connect(function()
        window.IsMinimized = not window.IsMinimized
        local targetSize = window.IsMinimized and 
            UDim2.new(windowSize.X.Scale, windowSize.X.Offset, 0, scale(70)) or 
            windowSize
        
        -- Скрываем кнопки управления И табы при сворачивании
        if window.IsMinimized then
            -- Скрываем кнопки управления
            tween(controlsFrame, {
                BackgroundTransparency = 1,
                Size = UDim2.new(0, 0, 0, 0)
            }, 0.3)
            -- Скрываем все дочерние кнопки управления
            for _, child in pairs(controlsFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    tween(child, {
                        BackgroundTransparency = 1,
                        TextTransparency = 1
                    }, 0.3)
                end
            end
            
            -- ГЛАВНОЕ: Скрываем табы (Main, Info и т.д.)
            if tabHolder then
                tween(tabHolder, {
                    Size = UDim2.new(0, 0, 1, 0),
                    BackgroundTransparency = 1
                }, 0.3)
                -- Скрываем все кнопки табов
                for _, tabBtn in pairs(tabHolder:GetChildren()) do
                    if tabBtn:IsA("TextButton") then
                        tween(tabBtn, {
                            BackgroundTransparency = 1,
                            TextTransparency = 1,
                            Size = UDim2.new(0, 0, 0, 0)
                        }, 0.3)
                    end
                end
            end
            
            -- Скрываем содержимое
            if content then
                tween(content, {BackgroundTransparency = 1}, 0.3)
            end
            
        else
            -- Показываем кнопки управления
            tween(controlsFrame, {
                BackgroundTransparency = 0,
                Size = UDim2.new(0, scale(120), 0, scale(40))
            }, 0.3)
            -- Показываем все дочерние кнопки управления
            for _, child in pairs(controlsFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    tween(child, {
                        BackgroundTransparency = 0,
                        TextTransparency = 0
                    }, 0.3)
                end
            end
            
            -- Показываем табы обратно
            if tabHolder then
                tween(tabHolder, {
                    Size = UDim2.new(0, scale(200), 1, 0),
                    BackgroundTransparency = 0
                }, 0.3)
                -- Показываем все кнопки табов
                for _, tabBtn in pairs(tabHolder:GetChildren()) do
                    if tabBtn:IsA("TextButton") then
                        tween(tabBtn, {
                            BackgroundTransparency = 0,
                            TextTransparency = 0,
                            Size = UDim2.new(1, -scale(20), 0, scale(50))
                        }, 0.3)
                    end
                end
            end
            
            -- Показываем содержимое
            if content then
                tween(content, {BackgroundTransparency = 0}, 0.3)
            end
        end
        
        tween(main, {Size = targetSize}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        createParticles(minimizeBtn, 4, Lieris.Theme.Warning, 2)
    end)
    
    -- Close button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseButton"
    closeBtn.Size = UDim2.new(0, scale(35), 0, scale(35))
    closeBtn.Position = UDim2.new(0, scale(84), 0, 0)
    closeBtn.BackgroundColor3 = Lieris.Theme.Error
    closeBtn.BackgroundTransparency = 0
    closeBtn.BorderSizePixel = 0
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Text = "✕"  -- Белый крестик для лучшего контраста
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = scale(16)
    closeBtn.Parent = controlsFrame
    
    createCorner(closeBtn, 10)
    
    closeBtn.MouseButton1Click:Connect(function()
        window:Hide()
        createParticles(closeBtn, 8, Lieris.Theme.Error, 1.5)
    end)
    
    -- Content area
    local content = Instance.new("Frame")
    content.Name = "Content"
    content.Size = UDim2.new(1, 0, 1, -scale(70))
    content.Position = UDim2.new(0, 0, 0, scale(70))
    content.BackgroundTransparency = 1
    content.Parent = main
    
    -- Sidebar
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.Size = UDim2.new(0, scale(200), 1, 0)
    sidebar.BackgroundColor3 = Lieris.Theme.Surface
    sidebar.BackgroundTransparency = 0.1
    sidebar.BorderSizePixel = 0
    sidebar.Parent = content
    
    createCorner(sidebar, 15)
    
    -- Tab content
    local tabContent = Instance.new("Frame")
    tabContent.Name = "TabContent"
    tabContent.Size = UDim2.new(1, -scale(210), 1, -scale(10))
    tabContent.Position = UDim2.new(0, scale(210), 0, scale(10))
    tabContent.BackgroundColor3 = Lieris.Theme.Card
    tabContent.BackgroundTransparency = 0.05
    tabContent.BorderSizePixel = 0
    tabContent.Parent = content
    
    createCorner(tabContent, 15)
    
    window.ScreenGui = screenGui
    window.Main = main
    window.Sidebar = sidebar
    window.TabContent = tabContent
    
    -- Enhanced drag functionality
    local dragging = false
    local dragStart, startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            -- Только разрешаем перетаскивание, не разворачиваем окно
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            
            -- Не изменяем размер при перетаскивании свернутого окна
            if not window.IsMinimized then
                tween(main, {Size = main.Size + UDim2.new(0, scale(5), 0, scale(5))}, 0.1)
            end
        end
    end)
    
    Services.UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            main.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    Services.UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            if dragging then
                dragging = false
                -- Возвращаем правильный размер в зависимости от состояния окна
                local targetSize = window.IsMinimized and 
                    UDim2.new(windowSize.X.Scale, windowSize.X.Offset, 0, scale(70)) or 
                    windowSize
                tween(main, {Size = targetSize}, 0.2)
            end
        end
    end)
    
    -- Улучшенная обработка клавиш (K для открытия/закрытия интерфейса)
    if not Lieris.Device.IsMobile then
        Services.UserInputService.InputBegan:Connect(function(input, processed)
            -- Обрабатываем нажатие клавиши K, даже если она уже обработана другим обработчиком
            if input.KeyCode == Enum.KeyCode.K then
                print("K key pressed - toggling interface")
                window:Toggle()
            end
        end)
        
        -- Выводим сообщение о том, как использовать клавишу K
        print("Используйте клавишу 'K' для открытия/закрытия интерфейса")
    end
    
    -- Window methods
    function window:Hide()
        -- Полностью скрываем интерфейс
        tween(main, {
            -- Сжимаем до нуля
            Size = UDim2.new(0, 0, 0, 0),
            -- Перемещаем за пределы экрана
            Position = UDim2.new(2, 0, 0.5, 0),
            -- Отключаем вращение
            Rotation = 0
        }, 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In, function()
            -- После завершения анимации делаем GUI полностью невидимым
            screenGui.Enabled = false
        end)
        
        -- Скрываем всё содержимое окна
        if tabHolder then
            tabHolder.Visible = false
        end
        
        if mainContainer then
            tween(mainContainer, {
                BackgroundTransparency = 1 -- Делаем контейнер прозрачным
            }, 0.2)
        end
        
        self.Visible = false
        
        if Lieris.MobileToggleButton then
            -- Полностью скрываем мобильную кнопку при сворачивании
            tween(Lieris.MobileToggleButton, {
                BackgroundTransparency = 1,
                TextTransparency = 1,
                Size = UDim2.new(0, 0, 0, 0)
            }, 0.3)
        end
    end
    
    function window:Show()
        -- Делаем GUI видимым
        screenGui.Enabled = true
        
        -- Задержка перед появлением (для плавности)
        task.wait(Lieris.Theme.InterfaceDelay or 0.1)
        
        -- Сначала делаем окно маленьким и не видимым (для анимации)
        main.Size = UDim2.new(0, 0, 0, 0)
        main.Position = UDim2.new(0.5, 0, 0.5, 0)
        
        -- Плавно возвращаем окно к полному размеру без вращения
        tween(main, {
            Size = windowSize,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Rotation = 0
        }, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        -- Показываем содержимое окна
        if tabHolder then
            tabHolder.Visible = true
        end
        
        -- Возвращаем исходный цвет и прозрачность
        if mainContainer then
            mainContainer.BackgroundTransparency = Lieris.Theme.SurfaceTransparency or 0
            tween(mainContainer, {
                BackgroundColor3 = Lieris.Theme.Surface
            }, 0.3)
        end
        
        self.Visible = true
        
        if Lieris.MobileToggleButton then
            -- Возвращаем мобильную кнопку при разворачивании
            tween(Lieris.MobileToggleButton, {
                BackgroundTransparency = Lieris.Theme.BackgroundTransparency or 0,
                TextTransparency = 0,
                Size = UDim2.new(0, scale(100), 0, scale(60))
            }, 0.3)
        end
    end
    
    function window:Toggle()
        if screenGui.Enabled then
            self:Hide()
        else
            self:Show()
        end
    end
    
    function window:CreateTab(tabConfig)
        tabConfig = tabConfig or {}
        
        local tab = {
            Name = tabConfig.Name or "Tab",
            Elements = {},
            Active = #self.Tabs == 0
        }
        
        -- Tab button with ultimate design
        local tabButton = Instance.new("TextButton")
        tabButton.Name = "TabButton"
        tabButton.Size = UDim2.new(1, -scale(20), 0, scale(50))
        tabButton.Position = UDim2.new(0, scale(10), 0, scale(15 + (#self.Tabs * 60)))
        tabButton.BackgroundColor3 = tab.Active and Lieris.Theme.Primary or Lieris.Theme.Card
        tabButton.BackgroundTransparency = tab.Active and 0.1 or 0.3
        tabButton.BorderSizePixel = 0
        tabButton.Font = Enum.Font.GothamMedium
        tabButton.Text = tab.Name
        tabButton.TextColor3 = tab.Active and Color3.fromRGB(255, 255, 255) or Lieris.Theme.Text
        tabButton.TextSize = scale(14)
        tabButton.Parent = self.Sidebar
        
        createCorner(tabButton, 12)
        if tab.Active then
            createStroke(tabButton, Lieris.Theme.Glow, 2, 0.4)
        end
        
        tabButton.MouseButton1Click:Connect(function()
            -- Switch tabs with animations
            for _, existingTab in pairs(self.Tabs) do
                if existingTab ~= tab then
                    existingTab.Active = false
                    existingTab.Frame.Visible = false
                    tween(existingTab.Button, {
                        BackgroundColor3 = Lieris.Theme.Card,
                        BackgroundTransparency = 0.3
                    }, 0.3)
                    
                    -- Remove stroke
                    local stroke = existingTab.Button:FindFirstChild("UIStroke")
                    if stroke then stroke:Destroy() end
                end
            end
            
            tab.Active = true
            tab.Frame.Visible = true
            tween(tabButton, {
                BackgroundColor3 = Lieris.Theme.Primary,
                BackgroundTransparency = 0.1
            }, 0.3)
            
            createStroke(tabButton, Lieris.Theme.Glow, 2, 0.4)
            createParticles(tabButton, 5, Lieris.Theme.Primary, 2)
        end)
        
        tab.Button = tabButton
        
        -- Tab content frame
        local tabFrame = Instance.new("ScrollingFrame")
        tabFrame.Name = "TabFrame"
        tabFrame.Size = UDim2.new(1, -scale(20), 1, -scale(20))
        tabFrame.Position = UDim2.new(0, scale(10), 0, scale(10))
        tabFrame.BackgroundTransparency = 1
        tabFrame.BorderSizePixel = 0
        tabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabFrame.ScrollBarThickness = scale(8)
        tabFrame.ScrollBarImageColor3 = Lieris.Theme.Primary
        tabFrame.ScrollBarImageTransparency = 0.4
        tabFrame.Visible = tab.Active
        tabFrame.Parent = self.TabContent
        
        -- Layout
        local listLayout = Instance.new("UIListLayout")
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0, scale(10))
        listLayout.Parent = tabFrame
        
        local padding = Instance.new("UIPadding")
        padding.PaddingTop = UDim.new(0, scale(15))
        padding.PaddingBottom = UDim.new(0, scale(15))
        padding.PaddingLeft = UDim.new(0, scale(15))
        padding.PaddingRight = UDim.new(0, scale(15))
        padding.Parent = tabFrame
        
        listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + scale(30))
        end)
        
        tab.Frame = tabFrame
        
        -- Enhanced element creation methods
        function tab:CreateSection(sectionConfig)
            sectionConfig = sectionConfig or {}
            
            local section = Instance.new("TextLabel")
            section.Name = "Section"
            section.Size = UDim2.new(1, 0, 0, scale(40))
            section.BackgroundTransparency = 1
            section.Font = Enum.Font.GothamBold
            section.Text = sectionConfig.Name or "Section"
            section.TextColor3 = Lieris.Theme.Primary
            section.TextSize = scale(18)
            section.TextXAlignment = Enum.TextXAlignment.Left
            section.TextYAlignment = Enum.TextYAlignment.Center
            section.LayoutOrder = #self.Elements + 1
            section.Parent = self.Frame
            
            table.insert(self.Elements, section)
            return section
        end
        
        function tab:CreateLabel(labelConfig)
            labelConfig = labelConfig or {}
            
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Size = UDim2.new(1, 0, 0, scale(30))
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.Text = labelConfig.Text or "Label"
            label.TextColor3 = Lieris.Theme.Text
            label.TextSize = scale(14)
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextYAlignment = Enum.TextYAlignment.Center
            label.TextWrapped = true
            label.LayoutOrder = #self.Elements + 1
            label.Parent = self.Frame
            
            local methods = {}
            function methods:SetText(text)
                label.Text = text
            end
            
            table.insert(self.Elements, label)
            return methods
        end
        
        function tab:CreateButton(buttonConfig)
            buttonConfig = buttonConfig or {}
            
            local button = Instance.new("TextButton")
            button.Name = "Button"
            button.Size = UDim2.new(1, 0, 0, scale(45))
            button.BackgroundColor3 = Lieris.Theme.Primary
            button.BackgroundTransparency = 0.1
            button.BorderSizePixel = 0
            button.Font = Enum.Font.GothamMedium
            button.Text = buttonConfig.Name or "Button"
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.TextSize = scale(14)
            button.LayoutOrder = #self.Elements + 1
            button.Parent = self.Frame
            
            createCorner(button, 12)
            createStroke(button, Lieris.Theme.Glow, 2, 0.5)
            
            -- Enhanced button effects
            local originalColor = button.BackgroundColor3
            
            button.MouseEnter:Connect(function()
                tween(button, {BackgroundColor3 = originalColor:lerp(Color3.fromRGB(255, 255, 255), 0.1)}, 0.2)
            end)
            
            button.MouseLeave:Connect(function()
                tween(button, {BackgroundColor3 = originalColor}, 0.2)
            end)
            
            button.MouseButton1Click:Connect(function()
                createParticles(button, 8, Lieris.Theme.Primary, 1.5)
                if buttonConfig.Callback then
                    buttonConfig.Callback()
                end
            end)
            
            table.insert(self.Elements, button)
            return button
        end
        
        function tab:CreateToggle(toggleConfig)
            toggleConfig = toggleConfig or {}
            
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = "ToggleFrame"
            toggleFrame.Size = UDim2.new(1, 0, 0, scale(50))
            toggleFrame.BackgroundColor3 = Lieris.Theme.Card
            toggleFrame.BackgroundTransparency = 0.1
            toggleFrame.BorderSizePixel = 0
            toggleFrame.LayoutOrder = #self.Elements + 1
            toggleFrame.Parent = self.Frame
            
            createCorner(toggleFrame, 12)
            createStroke(toggleFrame, Lieris.Theme.Border, 1, 0.6)
            
            -- Toggle label
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Position = UDim2.new(0, scale(15), 0, 0)
            label.Size = UDim2.new(1, -scale(100), 1, 0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.GothamMedium
            label.Text = toggleConfig.Name or "Toggle"
            label.TextColor3 = Lieris.Theme.Text
            label.TextSize = scale(14)
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.TextYAlignment = Enum.TextYAlignment.Center
            label.Parent = toggleFrame
            
            -- Toggle switch
            local value = toggleConfig.CurrentValue or false
            
            local switchFrame = Instance.new("Frame")
            switchFrame.Name = "SwitchFrame"
            switchFrame.Size = UDim2.new(0, scale(60), 0, scale(30))
            switchFrame.Position = UDim2.new(1, -scale(75), 0.5, -scale(15))
            switchFrame.BackgroundColor3 = value and Lieris.Theme.Success or Lieris.Theme.Surface
            switchFrame.BorderSizePixel = 0
            switchFrame.Parent = toggleFrame
            
            createCorner(switchFrame, 15)
            
            local switchKnob = Instance.new("Frame")
            switchKnob.Name = "SwitchKnob"
            switchKnob.Size = UDim2.new(0, scale(26), 0, scale(26))
            switchKnob.Position = value and UDim2.new(1, -scale(28), 0.5, -scale(13)) or UDim2.new(0, scale(2), 0.5, -scale(13))
            switchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            switchKnob.BorderSizePixel = 0
            switchKnob.Parent = switchFrame
            
            createCorner(switchKnob, 13)
            
            -- Status text
            local statusText = Instance.new("TextLabel")
            statusText.Name = "StatusText"
            statusText.Size = UDim2.new(1, 0, 1, 0)
            statusText.BackgroundTransparency = 1
            statusText.Font = Enum.Font.GothamBold
            statusText.Text = value and "ON" or "OFF"
            statusText.TextColor3 = Color3.fromRGB(255, 255, 255)
            statusText.TextSize = scale(10)
            statusText.TextXAlignment = Enum.TextXAlignment.Center
            statusText.TextYAlignment = Enum.TextYAlignment.Center
            statusText.Parent = switchFrame
            
            local function updateToggle(animate)
                animate = animate ~= false
                
                local targetPos = value and UDim2.new(1, -scale(28), 0.5, -scale(13)) or UDim2.new(0, scale(2), 0.5, -scale(13))
                local targetColor = value and Lieris.Theme.Success or Lieris.Theme.Surface
                
                if animate then
                    tween(switchKnob, {Position = targetPos}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
                    tween(switchFrame, {BackgroundColor3 = targetColor}, 0.3)
                else
                    switchKnob.Position = targetPos
                    switchFrame.BackgroundColor3 = targetColor
                end
                
                statusText.Text = value and "ON" or "OFF"
                
                if toggleConfig.Flag then
                    Lieris:SetFlag(toggleConfig.Flag, value)
                end
                
                if toggleConfig.Callback then
                    toggleConfig.Callback(value)
                end
            end
            
            -- Click handler
            local clickButton = Instance.new("TextButton")
            clickButton.Name = "ClickButton"
            clickButton.Size = UDim2.new(1, 0, 1, 0)
            clickButton.BackgroundTransparency = 1
            clickButton.Text = ""
            clickButton.Parent = toggleFrame
            
            clickButton.MouseButton1Click:Connect(function()
                value = not value
                updateToggle(true)
                createParticles(switchFrame, 5, value and Lieris.Theme.Success or Lieris.Theme.Surface, 2)
            end)
            
            -- Hover effects
            clickButton.MouseEnter:Connect(function()
                tween(toggleFrame, {BackgroundTransparency = 0.05}, 0.2)
            end)
            
            clickButton.MouseLeave:Connect(function()
                tween(toggleFrame, {BackgroundTransparency = 0.1}, 0.2)
            end)
            
            local methods = {}
            function methods:SetValue(newValue)
                value = newValue
                updateToggle(true)
            end
            
            function methods:GetValue()
                return value
            end
            
            table.insert(self.Elements, toggleFrame)
            return methods
        end
        
        function tab:CreateSlider(sliderConfig)
            sliderConfig = sliderConfig or {}
            
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = "SliderFrame"
            sliderFrame.Size = UDim2.new(1, 0, 0, scale(70))
            sliderFrame.BackgroundColor3 = Lieris.Theme.Card
            sliderFrame.BackgroundTransparency = 0.1
            sliderFrame.BorderSizePixel = 0
            sliderFrame.LayoutOrder = #self.Elements + 1
            sliderFrame.Parent = self.Frame
            
            createCorner(sliderFrame, 12)
            createStroke(sliderFrame, Lieris.Theme.Border, 1, 0.6)
            
            -- Slider label
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.Position = UDim2.new(0, scale(15), 0, scale(8))
            label.Size = UDim2.new(1, -scale(80), 0, scale(20))
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.GothamMedium
            label.Text = sliderConfig.Name or "Slider"
            label.TextColor3 = Lieris.Theme.Text
            label.TextSize = scale(14)
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = sliderFrame
            
            local min = sliderConfig.Range and sliderConfig.Range[1] or 0
            local max = sliderConfig.Range and sliderConfig.Range[2] or 100
            local value = sliderConfig.CurrentValue or min
            local suffix = sliderConfig.Suffix or ""
            
            -- Value display
            local valueLabel = Instance.new("TextLabel")
            valueLabel.Name = "ValueLabel"
            valueLabel.Position = UDim2.new(1, -scale(70), 0, scale(8))
            valueLabel.Size = UDim2.new(0, scale(60), 0, scale(20))
            valueLabel.BackgroundTransparency = 1
            valueLabel.Font = Enum.Font.GothamBold
            valueLabel.Text = value .. suffix
            valueLabel.TextColor3 = Lieris.Theme.Primary
            valueLabel.TextSize = scale(13)
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right
            valueLabel.Parent = sliderFrame
            
            -- Slider track
            local sliderTrack = Instance.new("Frame")
            sliderTrack.Name = "SliderTrack"
            sliderTrack.Size = UDim2.new(1, -scale(30), 0, scale(8))
            sliderTrack.Position = UDim2.new(0, scale(15), 0, scale(45))
            sliderTrack.BackgroundColor3 = Lieris.Theme.Surface
            sliderTrack.BorderSizePixel = 0
            sliderTrack.Parent = sliderFrame
            
            createCorner(sliderTrack, 4)
            
            -- Slider fill
            local sliderFill = Instance.new("Frame")
            sliderFill.Name = "SliderFill"
            sliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
            sliderFill.BackgroundColor3 = Lieris.Theme.Primary
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderTrack
            
            createCorner(sliderFill, 4)
            
            local function updateSlider()
                local percent = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                valueLabel.Text = value .. suffix
                
                if sliderConfig.Flag then
                    Lieris:SetFlag(sliderConfig.Flag, value)
                end
                
                if sliderConfig.Callback then
                    sliderConfig.Callback(value)
                end
            end
            
            local dragging = false
            
            sliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    
                    local function updateValue()
                        local mouse = Services.Players.LocalPlayer:GetMouse()
                        local percent = math.clamp((mouse.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
                        value = math.floor(min + (max - min) * percent)
                        updateSlider()
                    end
                    
                    updateValue()
                    
                    local connection
                    connection = Services.UserInputService.InputChanged:Connect(function(input2)
                        if input2.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                            updateValue()
                        end
                    end)
                    
                    Services.UserInputService.InputEnded:Connect(function(input2)
                        if input2.UserInputType == Enum.UserInputType.MouseButton1 then
                            dragging = false
                            connection:Disconnect()
                        end
                    end)
                end
            end)
            
            updateSlider()
            
            local methods = {}
            function methods:SetValue(newValue)
                value = math.clamp(newValue, min, max)
                updateSlider()
            end
            
            table.insert(self.Elements, sliderFrame)
            return methods
        end
        
        table.insert(self.Tabs, tab)
        return tab
    end
    
    -- Entrance animation
    main.Size = UDim2.new(0, 0, 0, 0)
    main.Rotation = -15
    tween(main, {
        Size = windowSize,
        Rotation = 0
    }, 0.8, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    table.insert(self.Windows, window)
    Lieris.CurrentWindow = window
    return window
end

-- Initialize with ultimate loading screen and demo
if not getgenv().LierisUltimateLoaded then
    getgenv().LierisUltimateLoaded = true
    
    -- Show loading screen and wait for completion
    local loadingScreen = createUltimateLoadingScreen()
    
    task.spawn(function()
        -- Wait for loading screen to finish completely
        repeat
            task.wait(0.1)
        until not loadingScreen or not loadingScreen.Parent
        
        task.wait(0.5) -- Small delay after loading screen
        
        print("Creating Ultimate Lieris GUI...")
        
        -- Only create window if it doesn't exist to prevent duplication
        if not Lieris.CurrentWindow or not Lieris.CurrentWindow.ScreenGui.Parent then
            local Window = Lieris:CreateWindow({
                Name = "Lieris Ultimate"
            })
        
            -- Main tab
            local MainTab = Window:CreateTab({
                Name = "Main Features"
            })
        
            MainTab:CreateSection({
                Name = "Welcome to Lieris Ultimate"
            })
            
            MainTab:CreateLabel({
                Text = "The most beautiful UI library for Roblox with dynamic design!"
            })
            
            MainTab:CreateButton({
                Name = "Test Ultimate Button",
                Callback = function()
                    Lieris:CreateNotification({
                        Title = "Ultimate Success!",
                        Content = "Button works with beautiful animations and effects!",
                        Duration = 4,
                        Type = "Success"
                    })
                end
            })
            
            MainTab:CreateToggle({
                Name = "Test Toggle",
                CurrentValue = false,
                Callback = function(Value)
                    Lieris:CreateNotification({
                        Title = "Toggle Changed",
                        Content = "Toggle is now " .. (Value and "ON" or "OFF"),
                        Duration = 3,
                        Type = "Info"
                    })
                end
            })
            
            MainTab:CreateSlider({
                Name = "Test Slider",
                Range = {0, 100},
                CurrentValue = 50,
                Suffix = "%",
                Callback = function(Value)
                    print("Slider value:", Value)
                end
            })
            
            MainTab:CreateButton({
                Name = "Join Discord Server",
                Callback = function()
                    openDiscord()
                end
            })
            
            -- Features tab
            local FeaturesTab = Window:CreateTab({
                Name = "Features"
            })
            
            FeaturesTab:CreateSection({
                Name = "Ultimate Features"
            })
            
            local features = {
                "• Ultra-dynamic glassmorphism design",
                "• Professional animations and particle effects",
                "• Custom logo and branding elements",
                "• Discord integration with browser opening",
                "• Adaptive mobile/desktop controls",
                "• Premium blue/white/black color scheme",
                "• Advanced visual effects system",
                "• Professional typography and spacing"
            }
            
            for _, feature in ipairs(features) do
                FeaturesTab:CreateLabel({
                    Text = feature
                })
            end
            
            -- Info tab
            local InfoTab = Window:CreateTab({
                Name = "Information"
            })
            
            InfoTab:CreateSection({
                Name = "About Lieris Ultimate"
            })
            
            InfoTab:CreateLabel({
                Text = "Lieris UI Library v4.0 - Ultimate Edition"
            })
            
            InfoTab:CreateLabel({
                Text = "Developer: elldries"
            })
            
            InfoTab:CreateLabel({
                Text = "Discord: discord.gg/TmyBPH539k"
            })
            
            InfoTab:CreateSection({
                Name = "Controls"
            })
            
            if Lieris.Device.IsMobile then
                InfoTab:CreateLabel({
                    Text = "Mobile: Tap the 'L' button to toggle GUI"
                })
            else
                InfoTab:CreateLabel({
                    Text = "Desktop: Press 'K' key to toggle GUI"
                })
            end
            
            InfoTab:CreateButton({
                Name = "Test Notifications",
                Callback = function()
                    Lieris:CreateNotification({
                        Title = "Ultimate Notification",
                        Content = "This is a beautiful notification with glassmorphism design!",
                        Duration = 5,
                        Type = "Info"
                    })
                end
            })
            
            -- Success notification
            Lieris:CreateNotification({
                Title = "Lieris Ultimate Loaded!",
                Content = "Ultimate UI with dynamic design loaded successfully!",
                Duration = 6,
                Type = "Success"
            })
            
            print("")
            print("═══════════════════════════════════════════════════════")
            print("              LIERIS ULTIMATE v4.0")
            print("            The Most Beautiful UI Library")
            print("═══════════════════════════════════════════════════════")
            print("✓ Ultimate loading screen displayed")
            print("✓ Dynamic GUI created without background blur")
            print("✓ Custom logo and branding implemented")
            print("✓ Discord integration working")
            print("✓ Device-adaptive controls active")
            if Lieris.Device.IsMobile then
                print("✓ Mobile: Tap 'L' button to toggle")
            else
                print("✓ Desktop: Press 'K' key to toggle")
            end
            print("✓ Beautiful animations and effects")
            print("✓ Toggle and slider components working")
            print("✓ Developer: elldries")
            print("✓ Discord: discord.gg/TmyBPH539k")
            print("═══════════════════════════════════════════════════════")
        end
    end)
end

return Lieris
